#pragma kernel Generate
#pragma kernel UseBrush
#pragma kernel Generate3D
#pragma kernel GenerateSphere
#include "/Includes/Noise.compute"

static const int numThreads = 8;

int numPointsPerAxis = 50;
RWStructuredBuffer<float> points;

float hardfloor;
float floorWeight;

float scale;
float3 offset;
float spacing;

float3 nestedChunkPos;


int PosToIndex(int x, int y, int z)
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}
[numthreads(numThreads,numThreads,numThreads)]
void Generate (int3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) 
        return;
    float3 pos = nestedChunkPos + id;
    pos.y += 50;
    float val = PerlinNoise2D(float2(pos.x,pos.z) * spacing * scale * 0.5) + 1;
    int index = PosToIndex(id.x,id.y,id.z);
    if(pos.y > 0) 
        points[index] = (val / pos.y) * 3;
    else points[index] = val;
}

[numthreads(numThreads,numThreads,numThreads)]
void Generate3D(int3 id: SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) 
        return;

    float3 pos = (nestedChunkPos + id) * spacing * scale;

    float val = clamp(PerlinNoise3D(pos), 0,1);
    int index = PosToIndex(id.x,id.y,id.z);

    points[index] = val;
}


[numthreads(numThreads,numThreads,numThreads)]
void GenerateSphere(int3 id: SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) 
        return;

    float3 pos = nestedChunkPos + id;
    float val = length(pos);
    int index = PosToIndex(id.x,id.y,id.z);
    /*float v = ((sin(atan2(pos.z,pos.x) * 50) + sin(atan2(pos.y,pos.x) * 50) + sin(atan2(pos.z,pos.y) * 50)) / 3 + 1 ) * 5;
    if(v + val < 100)
        points[index] = 1 - (v + val) / 100;
    else points[index] = 0;*/

    if(val < 100)
        points[index] = 1 - val/100;
    else points[index] = 0;
}

float brushValue;
int brushSize;
float3 nestedBrushPos;

[numthreads(numThreads,numThreads,numThreads)]
void UseBrush(int3 id: SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) 
        return;

        
    float3 pos = nestedChunkPos + id;
    float dist = length(pos - nestedBrushPos);
    //Points 배열의 인덱스
    int index = PosToIndex(id.x,id.y,id.z);

    

    if(brushSize <= dist)
    {
        points[index] = points[index] + (1 - points[index]) * dist * brushValue;
    }
    
}
